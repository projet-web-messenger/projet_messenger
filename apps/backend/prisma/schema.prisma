// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int                @id @default(autoincrement())
  email         String             @unique
  name          String
  messagesSent  Message[]          @relation("MessagesSent")
  // messagesReceived Message[]          @relation("MessagesReceived")
  conversations UserConversation[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

model Message {
  id             Int           @id @default(autoincrement())
  content        String
  sender         User          @relation("MessagesSent", fields: [senderId], references: [id])
  senderId       Int
  // receiver       User          @relation("MessagesReceived", fields: [receiverId], references: [id])
  // receiverId     Int
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Conversation {
  id           Int                @id @default(autoincrement())
  title        String?
  participants UserConversation[]
  messages     Message[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}

model UserConversation {
  id             Int          @id @default(autoincrement())
  userId         Int
  user           User         @relation(fields: [userId], references: [id])
  conversationId Int
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  @@unique([userId, conversationId])
}
